// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events/vcs (interfaces: PullApprovalChecker)

package mocks

import (
	github "github.com/google/go-github/v31/github"
	pegomock "github.com/petergtz/pegomock"
	models "github.com/runatlantis/atlantis/server/events/models"
	"reflect"
	"time"
)

type MockPullApprovalChecker struct {
	fail func(message string, callerSkip ...int)
}

func NewMockPullApprovalChecker(options ...pegomock.Option) *MockPullApprovalChecker {
	mock := &MockPullApprovalChecker{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockPullApprovalChecker) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockPullApprovalChecker) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockPullApprovalChecker) GetRepoStatuses(_param0 models.Repo, _param1 models.PullRequest) ([]*github.RepoStatus, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockPullApprovalChecker().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetRepoStatuses", params, []reflect.Type{reflect.TypeOf((*[]*github.RepoStatus)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []*github.RepoStatus
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]*github.RepoStatus)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockPullApprovalChecker) PullIsApproved(_param0 models.Repo, _param1 models.PullRequest) (bool, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockPullApprovalChecker().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PullIsApproved", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 bool
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockPullApprovalChecker) PullIsLocked(_param0 models.Repo, _param1 models.PullRequest, _param2 []*github.RepoStatus) (bool, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockPullApprovalChecker().")
	}
	params := []pegomock.Param{_param0, _param1, _param2}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PullIsLocked", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 bool
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockPullApprovalChecker) PullIsSQMergeable(_param0 models.Repo, _param1 models.PullRequest, _param2 []*github.RepoStatus) (bool, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockPullApprovalChecker().")
	}
	params := []pegomock.Param{_param0, _param1, _param2}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PullIsSQMergeable", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 bool
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockPullApprovalChecker) VerifyWasCalledOnce() *VerifierMockPullApprovalChecker {
	return &VerifierMockPullApprovalChecker{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockPullApprovalChecker) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockPullApprovalChecker {
	return &VerifierMockPullApprovalChecker{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockPullApprovalChecker) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockPullApprovalChecker {
	return &VerifierMockPullApprovalChecker{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockPullApprovalChecker) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockPullApprovalChecker {
	return &VerifierMockPullApprovalChecker{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockPullApprovalChecker struct {
	mock                   *MockPullApprovalChecker
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockPullApprovalChecker) GetRepoStatuses(_param0 models.Repo, _param1 models.PullRequest) *MockPullApprovalChecker_GetRepoStatuses_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetRepoStatuses", params, verifier.timeout)
	return &MockPullApprovalChecker_GetRepoStatuses_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockPullApprovalChecker_GetRepoStatuses_OngoingVerification struct {
	mock              *MockPullApprovalChecker
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockPullApprovalChecker_GetRepoStatuses_OngoingVerification) GetCapturedArguments() (models.Repo, models.PullRequest) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockPullApprovalChecker_GetRepoStatuses_OngoingVerification) GetAllCapturedArguments() (_param0 []models.Repo, _param1 []models.PullRequest) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]models.Repo, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(models.Repo)
		}
		_param1 = make([]models.PullRequest, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(models.PullRequest)
		}
	}
	return
}

func (verifier *VerifierMockPullApprovalChecker) PullIsApproved(_param0 models.Repo, _param1 models.PullRequest) *MockPullApprovalChecker_PullIsApproved_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PullIsApproved", params, verifier.timeout)
	return &MockPullApprovalChecker_PullIsApproved_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockPullApprovalChecker_PullIsApproved_OngoingVerification struct {
	mock              *MockPullApprovalChecker
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockPullApprovalChecker_PullIsApproved_OngoingVerification) GetCapturedArguments() (models.Repo, models.PullRequest) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockPullApprovalChecker_PullIsApproved_OngoingVerification) GetAllCapturedArguments() (_param0 []models.Repo, _param1 []models.PullRequest) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]models.Repo, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(models.Repo)
		}
		_param1 = make([]models.PullRequest, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(models.PullRequest)
		}
	}
	return
}

func (verifier *VerifierMockPullApprovalChecker) PullIsLocked(_param0 models.Repo, _param1 models.PullRequest, _param2 []*github.RepoStatus) *MockPullApprovalChecker_PullIsLocked_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PullIsLocked", params, verifier.timeout)
	return &MockPullApprovalChecker_PullIsLocked_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockPullApprovalChecker_PullIsLocked_OngoingVerification struct {
	mock              *MockPullApprovalChecker
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockPullApprovalChecker_PullIsLocked_OngoingVerification) GetCapturedArguments() (models.Repo, models.PullRequest, []*github.RepoStatus) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *MockPullApprovalChecker_PullIsLocked_OngoingVerification) GetAllCapturedArguments() (_param0 []models.Repo, _param1 []models.PullRequest, _param2 [][]*github.RepoStatus) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]models.Repo, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(models.Repo)
		}
		_param1 = make([]models.PullRequest, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(models.PullRequest)
		}
		_param2 = make([][]*github.RepoStatus, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.([]*github.RepoStatus)
		}
	}
	return
}

func (verifier *VerifierMockPullApprovalChecker) PullIsSQMergeable(_param0 models.Repo, _param1 models.PullRequest, _param2 []*github.RepoStatus) *MockPullApprovalChecker_PullIsSQMergeable_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PullIsSQMergeable", params, verifier.timeout)
	return &MockPullApprovalChecker_PullIsSQMergeable_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockPullApprovalChecker_PullIsSQMergeable_OngoingVerification struct {
	mock              *MockPullApprovalChecker
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockPullApprovalChecker_PullIsSQMergeable_OngoingVerification) GetCapturedArguments() (models.Repo, models.PullRequest, []*github.RepoStatus) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *MockPullApprovalChecker_PullIsSQMergeable_OngoingVerification) GetAllCapturedArguments() (_param0 []models.Repo, _param1 []models.PullRequest, _param2 [][]*github.RepoStatus) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]models.Repo, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(models.Repo)
		}
		_param1 = make([]models.PullRequest, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(models.PullRequest)
		}
		_param2 = make([][]*github.RepoStatus, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.([]*github.RepoStatus)
		}
	}
	return
}
