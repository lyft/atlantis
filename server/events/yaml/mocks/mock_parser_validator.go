// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events/yaml (interfaces: IParserValidator)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	valid "github.com/runatlantis/atlantis/server/events/yaml/valid"
	"reflect"
	"time"
)

type MockIParserValidator struct {
	fail func(message string, callerSkip ...int)
}

func NewMockIParserValidator(options ...pegomock.Option) *MockIParserValidator {
	mock := &MockIParserValidator{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockIParserValidator) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockIParserValidator) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockIParserValidator) HasRepoCfg(absRepoDir string) (bool, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIParserValidator().")
	}
	params := []pegomock.Param{absRepoDir}
	result := pegomock.GetGenericMockFrom(mock).Invoke("HasRepoCfg", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 bool
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockIParserValidator) ParseRepoCfg(absRepoDir string, globalCfg valid.GlobalCfg, repoID string) (valid.RepoCfg, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIParserValidator().")
	}
	params := []pegomock.Param{absRepoDir, globalCfg, repoID}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ParseRepoCfg", params, []reflect.Type{reflect.TypeOf((*valid.RepoCfg)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 valid.RepoCfg
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(valid.RepoCfg)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockIParserValidator) ParseRepoCfgData(repoCfgData []byte, globalCfg valid.GlobalCfg, repoID string) (valid.RepoCfg, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIParserValidator().")
	}
	params := []pegomock.Param{repoCfgData, globalCfg, repoID}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ParseRepoCfgData", params, []reflect.Type{reflect.TypeOf((*valid.RepoCfg)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 valid.RepoCfg
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(valid.RepoCfg)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockIParserValidator) ParseGlobalCfg(configFile string, defaultCfg valid.GlobalCfg) (valid.GlobalCfg, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIParserValidator().")
	}
	params := []pegomock.Param{configFile, defaultCfg}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ParseGlobalCfg", params, []reflect.Type{reflect.TypeOf((*valid.GlobalCfg)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 valid.GlobalCfg
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(valid.GlobalCfg)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockIParserValidator) ParseGlobalCfgJSON(cfgJSON string, defaultCfg valid.GlobalCfg) (valid.GlobalCfg, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIParserValidator().")
	}
	params := []pegomock.Param{cfgJSON, defaultCfg}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ParseGlobalCfgJSON", params, []reflect.Type{reflect.TypeOf((*valid.GlobalCfg)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 valid.GlobalCfg
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(valid.GlobalCfg)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockIParserValidator) VerifyWasCalledOnce() *VerifierMockIParserValidator {
	return &VerifierMockIParserValidator{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockIParserValidator) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockIParserValidator {
	return &VerifierMockIParserValidator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockIParserValidator) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockIParserValidator {
	return &VerifierMockIParserValidator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockIParserValidator) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockIParserValidator {
	return &VerifierMockIParserValidator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockIParserValidator struct {
	mock                   *MockIParserValidator
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockIParserValidator) HasRepoCfg(absRepoDir string) *MockIParserValidator_HasRepoCfg_OngoingVerification {
	params := []pegomock.Param{absRepoDir}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "HasRepoCfg", params, verifier.timeout)
	return &MockIParserValidator_HasRepoCfg_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIParserValidator_HasRepoCfg_OngoingVerification struct {
	mock              *MockIParserValidator
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIParserValidator_HasRepoCfg_OngoingVerification) GetCapturedArguments() string {
	absRepoDir := c.GetAllCapturedArguments()
	return absRepoDir[len(absRepoDir)-1]
}

func (c *MockIParserValidator_HasRepoCfg_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockIParserValidator) ParseRepoCfg(absRepoDir string, globalCfg valid.GlobalCfg, repoID string) *MockIParserValidator_ParseRepoCfg_OngoingVerification {
	params := []pegomock.Param{absRepoDir, globalCfg, repoID}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ParseRepoCfg", params, verifier.timeout)
	return &MockIParserValidator_ParseRepoCfg_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIParserValidator_ParseRepoCfg_OngoingVerification struct {
	mock              *MockIParserValidator
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIParserValidator_ParseRepoCfg_OngoingVerification) GetCapturedArguments() (string, valid.GlobalCfg, string) {
	absRepoDir, globalCfg, repoID := c.GetAllCapturedArguments()
	return absRepoDir[len(absRepoDir)-1], globalCfg[len(globalCfg)-1], repoID[len(repoID)-1]
}

func (c *MockIParserValidator_ParseRepoCfg_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []valid.GlobalCfg, _param2 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]valid.GlobalCfg, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(valid.GlobalCfg)
		}
		_param2 = make([]string, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockIParserValidator) ParseRepoCfgData(repoCfgData []byte, globalCfg valid.GlobalCfg, repoID string) *MockIParserValidator_ParseRepoCfgData_OngoingVerification {
	params := []pegomock.Param{repoCfgData, globalCfg, repoID}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ParseRepoCfgData", params, verifier.timeout)
	return &MockIParserValidator_ParseRepoCfgData_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIParserValidator_ParseRepoCfgData_OngoingVerification struct {
	mock              *MockIParserValidator
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIParserValidator_ParseRepoCfgData_OngoingVerification) GetCapturedArguments() ([]byte, valid.GlobalCfg, string) {
	repoCfgData, globalCfg, repoID := c.GetAllCapturedArguments()
	return repoCfgData[len(repoCfgData)-1], globalCfg[len(globalCfg)-1], repoID[len(repoID)-1]
}

func (c *MockIParserValidator_ParseRepoCfgData_OngoingVerification) GetAllCapturedArguments() (_param0 [][]byte, _param1 []valid.GlobalCfg, _param2 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]byte, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.([]byte)
		}
		_param1 = make([]valid.GlobalCfg, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(valid.GlobalCfg)
		}
		_param2 = make([]string, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockIParserValidator) ParseGlobalCfg(configFile string, defaultCfg valid.GlobalCfg) *MockIParserValidator_ParseGlobalCfg_OngoingVerification {
	params := []pegomock.Param{configFile, defaultCfg}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ParseGlobalCfg", params, verifier.timeout)
	return &MockIParserValidator_ParseGlobalCfg_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIParserValidator_ParseGlobalCfg_OngoingVerification struct {
	mock              *MockIParserValidator
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIParserValidator_ParseGlobalCfg_OngoingVerification) GetCapturedArguments() (string, valid.GlobalCfg) {
	configFile, defaultCfg := c.GetAllCapturedArguments()
	return configFile[len(configFile)-1], defaultCfg[len(defaultCfg)-1]
}

func (c *MockIParserValidator_ParseGlobalCfg_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []valid.GlobalCfg) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]valid.GlobalCfg, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(valid.GlobalCfg)
		}
	}
	return
}

func (verifier *VerifierMockIParserValidator) ParseGlobalCfgJSON(cfgJSON string, defaultCfg valid.GlobalCfg) *MockIParserValidator_ParseGlobalCfgJSON_OngoingVerification {
	params := []pegomock.Param{cfgJSON, defaultCfg}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ParseGlobalCfgJSON", params, verifier.timeout)
	return &MockIParserValidator_ParseGlobalCfgJSON_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIParserValidator_ParseGlobalCfgJSON_OngoingVerification struct {
	mock              *MockIParserValidator
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIParserValidator_ParseGlobalCfgJSON_OngoingVerification) GetCapturedArguments() (string, valid.GlobalCfg) {
	cfgJSON, defaultCfg := c.GetAllCapturedArguments()
	return cfgJSON[len(cfgJSON)-1], defaultCfg[len(defaultCfg)-1]
}

func (c *MockIParserValidator_ParseGlobalCfgJSON_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []valid.GlobalCfg) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]valid.GlobalCfg, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(valid.GlobalCfg)
		}
	}
	return
}
