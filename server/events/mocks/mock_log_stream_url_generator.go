// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: JobsURLGenerator)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	models "github.com/runatlantis/atlantis/server/events/models"
	"reflect"
	"time"
)

type MockJobsURLGenerator struct {
	fail func(message string, callerSkip ...int)
}

func NewMockJobsURLGenerator(options ...pegomock.Option) *MockJobsURLGenerator {
	mock := &MockJobsURLGenerator{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockJobsURLGenerator) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockJobsURLGenerator) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockJobsURLGenerator) ProjectJobsUrl(pull models.PullRequest, p models.ProjectCommandContext) string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockJobsURLGenerator().")
	}
	params := []pegomock.Param{pull, p}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ProjectJobsUrl", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockJobsURLGenerator) VerifyWasCalledOnce() *VerifierMockJobsURLGenerator {
	return &VerifierMockJobsURLGenerator{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockJobsURLGenerator) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockJobsURLGenerator {
	return &VerifierMockJobsURLGenerator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockJobsURLGenerator) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockJobsURLGenerator {
	return &VerifierMockJobsURLGenerator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockJobsURLGenerator) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockJobsURLGenerator {
	return &VerifierMockJobsURLGenerator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockJobsURLGenerator struct {
	mock                   *MockJobsURLGenerator
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockJobsURLGenerator) ProjectJobsUrl(pull models.PullRequest, p models.ProjectCommandContext) *MockJobsURLGenerator_ProjectJobsUrl_OngoingVerification {
	params := []pegomock.Param{pull, p}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ProjectJobsUrl", params, verifier.timeout)
	return &MockJobsURLGenerator_ProjectJobsUrl_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockJobsURLGenerator_ProjectJobsUrl_OngoingVerification struct {
	mock              *MockJobsURLGenerator
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockJobsURLGenerator_ProjectJobsUrl_OngoingVerification) GetCapturedArguments() (models.PullRequest, models.ProjectCommandContext) {
	pull, p := c.GetAllCapturedArguments()
	return pull[len(pull)-1], p[len(p)-1]
}

func (c *MockJobsURLGenerator_ProjectJobsUrl_OngoingVerification) GetAllCapturedArguments() (_param0 []models.PullRequest, _param1 []models.ProjectCommandContext) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]models.PullRequest, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(models.PullRequest)
		}
		_param1 = make([]models.ProjectCommandContext, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(models.ProjectCommandContext)
		}
	}
	return
}
