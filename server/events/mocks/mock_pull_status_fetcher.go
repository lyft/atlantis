// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: PullStatusFetcher)

package mocks

import (
	"reflect"
	"time"

	pegomock "github.com/petergtz/pegomock"
	models "github.com/runatlantis/atlantis/server/events/models"
)

type MockPullStatusFetcher struct {
	fail func(message string, callerSkip ...int)
}

func NewMockPullStatusFetcher(options ...pegomock.Option) *MockPullStatusFetcher {
	mock := &MockPullStatusFetcher{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockPullStatusFetcher) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockPullStatusFetcher) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockPullStatusFetcher) GetPullStatus(pull models.PullRequest) (*models.PullStatus, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockPullStatusFetcher().")
	}
	params := []pegomock.Param{pull}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetPullStatus", params, []reflect.Type{reflect.TypeOf((**models.PullStatus)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *models.PullStatus
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*models.PullStatus)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockPullStatusFetcher) VerifyWasCalledOnce() *VerifierMockPullStatusFetcher {
	return &VerifierMockPullStatusFetcher{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockPullStatusFetcher) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockPullStatusFetcher {
	return &VerifierMockPullStatusFetcher{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockPullStatusFetcher) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockPullStatusFetcher {
	return &VerifierMockPullStatusFetcher{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockPullStatusFetcher) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockPullStatusFetcher {
	return &VerifierMockPullStatusFetcher{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockPullStatusFetcher struct {
	mock                   *MockPullStatusFetcher
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockPullStatusFetcher) GetPullStatus(pull models.PullRequest) *MockPullStatusFetcher_GetPullStatus_OngoingVerification {
	params := []pegomock.Param{pull}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetPullStatus", params, verifier.timeout)
	return &MockPullStatusFetcher_GetPullStatus_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockPullStatusFetcher_GetPullStatus_OngoingVerification struct {
	mock              *MockPullStatusFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockPullStatusFetcher_GetPullStatus_OngoingVerification) GetCapturedArguments() models.PullRequest {
	pull := c.GetAllCapturedArguments()
	return pull[len(pull)-1]
}

func (c *MockPullStatusFetcher_GetPullStatus_OngoingVerification) GetAllCapturedArguments() (_param0 []models.PullRequest) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]models.PullRequest, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(models.PullRequest)
		}
	}
	return
}
