// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: ProjectFinder)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	models "github.com/runatlantis/atlantis/server/events/models"
	valid "github.com/runatlantis/atlantis/server/events/yaml/valid"
	logging "github.com/runatlantis/atlantis/server/logging"
	"reflect"
	"time"
)

type MockProjectFinder struct {
	fail func(message string, callerSkip ...int)
}

func NewMockProjectFinder(options ...pegomock.Option) *MockProjectFinder {
	mock := &MockProjectFinder{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockProjectFinder) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockProjectFinder) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockProjectFinder) DetermineProjects(_param0 logging.SimpleLogging, _param1 []string, _param2 string, _param3 string, _param4 string) []models.Project {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockProjectFinder().")
	}
	params := []pegomock.Param{_param0, _param1, _param2, _param3, _param4}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DetermineProjects", params, []reflect.Type{reflect.TypeOf((*[]models.Project)(nil)).Elem()})
	var ret0 []models.Project
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]models.Project)
		}
	}
	return ret0
}

func (mock *MockProjectFinder) DetermineProjectsViaConfig(_param0 logging.SimpleLogging, _param1 []string, _param2 valid.RepoCfg, _param3 string) ([]valid.Project, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockProjectFinder().")
	}
	params := []pegomock.Param{_param0, _param1, _param2, _param3}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DetermineProjectsViaConfig", params, []reflect.Type{reflect.TypeOf((*[]valid.Project)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []valid.Project
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]valid.Project)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockProjectFinder) FindMatchingProjects(_param0 logging.SimpleLogging, _param1 models.Repo, _param2 models.PullRequest) ([]string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockProjectFinder().")
	}
	params := []pegomock.Param{_param0, _param1, _param2}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FindMatchingProjects", params, []reflect.Type{reflect.TypeOf((*[]string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockProjectFinder) VerifyWasCalledOnce() *VerifierMockProjectFinder {
	return &VerifierMockProjectFinder{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockProjectFinder) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockProjectFinder {
	return &VerifierMockProjectFinder{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockProjectFinder) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockProjectFinder {
	return &VerifierMockProjectFinder{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockProjectFinder) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockProjectFinder {
	return &VerifierMockProjectFinder{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockProjectFinder struct {
	mock                   *MockProjectFinder
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockProjectFinder) DetermineProjects(_param0 logging.SimpleLogging, _param1 []string, _param2 string, _param3 string, _param4 string) *MockProjectFinder_DetermineProjects_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2, _param3, _param4}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DetermineProjects", params, verifier.timeout)
	return &MockProjectFinder_DetermineProjects_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockProjectFinder_DetermineProjects_OngoingVerification struct {
	mock              *MockProjectFinder
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockProjectFinder_DetermineProjects_OngoingVerification) GetCapturedArguments() (logging.SimpleLogging, []string, string, string, string) {
	_param0, _param1, _param2, _param3, _param4 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1], _param3[len(_param3)-1], _param4[len(_param4)-1]
}

func (c *MockProjectFinder_DetermineProjects_OngoingVerification) GetAllCapturedArguments() (_param0 []logging.SimpleLogging, _param1 [][]string, _param2 []string, _param3 []string, _param4 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]logging.SimpleLogging, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(logging.SimpleLogging)
		}
		_param1 = make([][]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.([]string)
		}
		_param2 = make([]string, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(string)
		}
		_param3 = make([]string, len(c.methodInvocations))
		for u, param := range params[3] {
			_param3[u] = param.(string)
		}
		_param4 = make([]string, len(c.methodInvocations))
		for u, param := range params[4] {
			_param4[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockProjectFinder) DetermineProjectsViaConfig(_param0 logging.SimpleLogging, _param1 []string, _param2 valid.RepoCfg, _param3 string) *MockProjectFinder_DetermineProjectsViaConfig_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2, _param3}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DetermineProjectsViaConfig", params, verifier.timeout)
	return &MockProjectFinder_DetermineProjectsViaConfig_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockProjectFinder_DetermineProjectsViaConfig_OngoingVerification struct {
	mock              *MockProjectFinder
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockProjectFinder_DetermineProjectsViaConfig_OngoingVerification) GetCapturedArguments() (logging.SimpleLogging, []string, valid.RepoCfg, string) {
	_param0, _param1, _param2, _param3 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1], _param3[len(_param3)-1]
}

func (c *MockProjectFinder_DetermineProjectsViaConfig_OngoingVerification) GetAllCapturedArguments() (_param0 []logging.SimpleLogging, _param1 [][]string, _param2 []valid.RepoCfg, _param3 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]logging.SimpleLogging, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(logging.SimpleLogging)
		}
		_param1 = make([][]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.([]string)
		}
		_param2 = make([]valid.RepoCfg, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(valid.RepoCfg)
		}
		_param3 = make([]string, len(c.methodInvocations))
		for u, param := range params[3] {
			_param3[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockProjectFinder) FindMatchingProjects(_param0 logging.SimpleLogging, _param1 models.Repo, _param2 models.PullRequest) *MockProjectFinder_FindMatchingProjects_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FindMatchingProjects", params, verifier.timeout)
	return &MockProjectFinder_FindMatchingProjects_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockProjectFinder_FindMatchingProjects_OngoingVerification struct {
	mock              *MockProjectFinder
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockProjectFinder_FindMatchingProjects_OngoingVerification) GetCapturedArguments() (logging.SimpleLogging, models.Repo, models.PullRequest) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *MockProjectFinder_FindMatchingProjects_OngoingVerification) GetAllCapturedArguments() (_param0 []logging.SimpleLogging, _param1 []models.Repo, _param2 []models.PullRequest) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]logging.SimpleLogging, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(logging.SimpleLogging)
		}
		_param1 = make([]models.Repo, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(models.Repo)
		}
		_param2 = make([]models.PullRequest, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(models.PullRequest)
		}
	}
	return
}
