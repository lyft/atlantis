// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/controllers/events (interfaces: VCSPostHandler)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	http "net/http"
	"reflect"
	"time"
)

type MockVCSPostHandler struct {
	fail func(message string, callerSkip ...int)
}

func NewMockVCSPostHandler(options ...pegomock.Option) *MockVCSPostHandler {
	mock := &MockVCSPostHandler{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockVCSPostHandler) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockVCSPostHandler) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockVCSPostHandler) Post(w http.ResponseWriter, r *http.Request) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockVCSPostHandler().")
	}
	params := []pegomock.Param{w, r}
	pegomock.GetGenericMockFrom(mock).Invoke("Post", params, []reflect.Type{})
}

func (mock *MockVCSPostHandler) VerifyWasCalledOnce() *VerifierMockVCSPostHandler {
	return &VerifierMockVCSPostHandler{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockVCSPostHandler) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockVCSPostHandler {
	return &VerifierMockVCSPostHandler{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockVCSPostHandler) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockVCSPostHandler {
	return &VerifierMockVCSPostHandler{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockVCSPostHandler) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockVCSPostHandler {
	return &VerifierMockVCSPostHandler{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockVCSPostHandler struct {
	mock                   *MockVCSPostHandler
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockVCSPostHandler) Post(w http.ResponseWriter, r *http.Request) *MockVCSPostHandler_Post_OngoingVerification {
	params := []pegomock.Param{w, r}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Post", params, verifier.timeout)
	return &MockVCSPostHandler_Post_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockVCSPostHandler_Post_OngoingVerification struct {
	mock              *MockVCSPostHandler
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockVCSPostHandler_Post_OngoingVerification) GetCapturedArguments() (http.ResponseWriter, *http.Request) {
	w, r := c.GetAllCapturedArguments()
	return w[len(w)-1], r[len(r)-1]
}

func (c *MockVCSPostHandler_Post_OngoingVerification) GetAllCapturedArguments() (_param0 []http.ResponseWriter, _param1 []*http.Request) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]http.ResponseWriter, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(http.ResponseWriter)
		}
		_param1 = make([]*http.Request, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(*http.Request)
		}
	}
	return
}
