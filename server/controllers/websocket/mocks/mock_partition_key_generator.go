// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/controllers/websocket (interfaces: PartitionKeyGenerator)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	http "net/http"
	"reflect"
	"time"
)

type MockPartitionKeyGenerator struct {
	fail func(message string, callerSkip ...int)
}

func NewMockPartitionKeyGenerator(options ...pegomock.Option) *MockPartitionKeyGenerator {
	mock := &MockPartitionKeyGenerator{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockPartitionKeyGenerator) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockPartitionKeyGenerator) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockPartitionKeyGenerator) Generate(_param0 *http.Request) (string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockPartitionKeyGenerator().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Generate", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockPartitionKeyGenerator) VerifyWasCalledOnce() *VerifierMockPartitionKeyGenerator {
	return &VerifierMockPartitionKeyGenerator{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockPartitionKeyGenerator) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockPartitionKeyGenerator {
	return &VerifierMockPartitionKeyGenerator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockPartitionKeyGenerator) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockPartitionKeyGenerator {
	return &VerifierMockPartitionKeyGenerator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockPartitionKeyGenerator) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockPartitionKeyGenerator {
	return &VerifierMockPartitionKeyGenerator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockPartitionKeyGenerator struct {
	mock                   *MockPartitionKeyGenerator
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockPartitionKeyGenerator) Generate(_param0 *http.Request) *MockPartitionKeyGenerator_Generate_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Generate", params, verifier.timeout)
	return &MockPartitionKeyGenerator_Generate_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockPartitionKeyGenerator_Generate_OngoingVerification struct {
	mock              *MockPartitionKeyGenerator
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockPartitionKeyGenerator_Generate_OngoingVerification) GetCapturedArguments() *http.Request {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockPartitionKeyGenerator_Generate_OngoingVerification) GetAllCapturedArguments() (_param0 []*http.Request) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*http.Request, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(*http.Request)
		}
	}
	return
}
