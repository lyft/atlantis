// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/controllers/websocket (interfaces: ReadCloser)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockReadCloser struct {
	fail func(message string, callerSkip ...int)
}

func NewMockReadCloser(options ...pegomock.Option) *MockReadCloser {
	mock := &MockReadCloser{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockReadCloser) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockReadCloser) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockReadCloser) Close() error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockReadCloser().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Close", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockReadCloser) Read(_param0 []byte) (int, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockReadCloser().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Read", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 int
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockReadCloser) VerifyWasCalledOnce() *VerifierMockReadCloser {
	return &VerifierMockReadCloser{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockReadCloser) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockReadCloser {
	return &VerifierMockReadCloser{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockReadCloser) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockReadCloser {
	return &VerifierMockReadCloser{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockReadCloser) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockReadCloser {
	return &VerifierMockReadCloser{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockReadCloser struct {
	mock                   *MockReadCloser
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockReadCloser) Close() *MockReadCloser_Close_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Close", params, verifier.timeout)
	return &MockReadCloser_Close_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockReadCloser_Close_OngoingVerification struct {
	mock              *MockReadCloser
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockReadCloser_Close_OngoingVerification) GetCapturedArguments() {
}

func (c *MockReadCloser_Close_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockReadCloser) Read(_param0 []byte) *MockReadCloser_Read_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Read", params, verifier.timeout)
	return &MockReadCloser_Read_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockReadCloser_Read_OngoingVerification struct {
	mock              *MockReadCloser
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockReadCloser_Read_OngoingVerification) GetCapturedArguments() []byte {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockReadCloser_Read_OngoingVerification) GetAllCapturedArguments() (_param0 [][]byte) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]byte, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.([]byte)
		}
	}
	return
}
