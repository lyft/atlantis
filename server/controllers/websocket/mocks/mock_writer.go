// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/controllers/websocket (interfaces: Writer)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	io "io"
	http "net/http"
	"reflect"
	"time"
)

type MockWriter struct {
	fail func(message string, callerSkip ...int)
}

func NewMockWriter(options ...pegomock.Option) *MockWriter {
	mock := &MockWriter{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockWriter) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockWriter) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockWriter) WriteFromChan(_param0 http.ResponseWriter, _param1 *http.Request, _param2 chan string) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockWriter().")
	}
	params := []pegomock.Param{_param0, _param1, _param2}
	result := pegomock.GetGenericMockFrom(mock).Invoke("WriteFromChan", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockWriter) WriteFromReader(_param0 http.ResponseWriter, _param1 *http.Request, _param2 io.ReadCloser) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockWriter().")
	}
	params := []pegomock.Param{_param0, _param1, _param2}
	result := pegomock.GetGenericMockFrom(mock).Invoke("WriteFromReader", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockWriter) VerifyWasCalledOnce() *VerifierMockWriter {
	return &VerifierMockWriter{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockWriter) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockWriter {
	return &VerifierMockWriter{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockWriter) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockWriter {
	return &VerifierMockWriter{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockWriter) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockWriter {
	return &VerifierMockWriter{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockWriter struct {
	mock                   *MockWriter
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockWriter) WriteFromChan(_param0 http.ResponseWriter, _param1 *http.Request, _param2 chan string) *MockWriter_WriteFromChan_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "WriteFromChan", params, verifier.timeout)
	return &MockWriter_WriteFromChan_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockWriter_WriteFromChan_OngoingVerification struct {
	mock              *MockWriter
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockWriter_WriteFromChan_OngoingVerification) GetCapturedArguments() (http.ResponseWriter, *http.Request, chan string) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *MockWriter_WriteFromChan_OngoingVerification) GetAllCapturedArguments() (_param0 []http.ResponseWriter, _param1 []*http.Request, _param2 []chan string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]http.ResponseWriter, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(http.ResponseWriter)
		}
		_param1 = make([]*http.Request, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(*http.Request)
		}
		_param2 = make([]chan string, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(chan string)
		}
	}
	return
}

func (verifier *VerifierMockWriter) WriteFromReader(_param0 http.ResponseWriter, _param1 *http.Request, _param2 io.ReadCloser) *MockWriter_WriteFromReader_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "WriteFromReader", params, verifier.timeout)
	return &MockWriter_WriteFromReader_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockWriter_WriteFromReader_OngoingVerification struct {
	mock              *MockWriter
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockWriter_WriteFromReader_OngoingVerification) GetCapturedArguments() (http.ResponseWriter, *http.Request, io.ReadCloser) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *MockWriter_WriteFromReader_OngoingVerification) GetAllCapturedArguments() (_param0 []http.ResponseWriter, _param1 []*http.Request, _param2 []io.ReadCloser) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]http.ResponseWriter, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(http.ResponseWriter)
		}
		_param1 = make([]*http.Request, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(*http.Request)
		}
		_param2 = make([]io.ReadCloser, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(io.ReadCloser)
		}
	}
	return
}
