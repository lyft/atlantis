// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/lyft/gostats"
	"github.com/runatlantis/atlantis/server/config"
	"github.com/runatlantis/atlantis/server/core/db"
	"github.com/runatlantis/atlantis/server/core/locking"
	"github.com/runatlantis/atlantis/server/events"
	"github.com/runatlantis/atlantis/server/events/vcs"
	"github.com/runatlantis/atlantis/server/handlers"
	"github.com/runatlantis/atlantis/server/logging"
	"github.com/runatlantis/atlantis/server/lyft/scheduled"
)

// Injectors from wire.go:

func InitializeScheduledExecutorService(vcsClient vcs.Client, userConfig config.UserConfig, rawGithubClient *vcs.GithubClient, githubClient vcs.IGithubClient, logger logging.SimpleLogging, scope stats.Scope, projectCommandOutputHandler handlers.ProjectCommandOutputHandler, locker locking.Locker, boltdb *db.BoltDB, workingDir events.WorkingDir) (*scheduled.ExecutorService, error) {
	eventParser := events.NewEventParser(userConfig)
	fileWorkDirIterator := events.NewFileWorkDirIterator(githubClient, eventParser, userConfig, logger)
	closedPullCleaner := scheduled.NewStaleClosedPullExecutor(vcsClient, locker, workingDir, logger, boltdb, projectCommandOutputHandler)
	openPullClenaer := scheduled.NewStaleOpenPullExecutor(vcsClient, locker, workingDir, logger, boltdb, projectCommandOutputHandler)
	executorService := scheduled.NewExecutorService(fileWorkDirIterator, scope, logger, closedPullCleaner, openPullClenaer, rawGithubClient)
	return executorService, nil
}
