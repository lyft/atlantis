// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/lyft/aws/sns (interfaces: Writer)

package mocks

import (
	context "context"
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockWriter struct {
	fail func(message string, callerSkip ...int)
}

func NewMockWriter(options ...pegomock.Option) *MockWriter {
	mock := &MockWriter{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockWriter) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockWriter) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockWriter) Write(_param0 []byte) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockWriter().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Write", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockWriter) WriteWithContext(ctx context.Context, payload []byte) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockWriter().")
	}
	params := []pegomock.Param{ctx, payload}
	result := pegomock.GetGenericMockFrom(mock).Invoke("WriteWithContext", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockWriter) VerifyWasCalledOnce() *VerifierMockWriter {
	return &VerifierMockWriter{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockWriter) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockWriter {
	return &VerifierMockWriter{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockWriter) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockWriter {
	return &VerifierMockWriter{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockWriter) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockWriter {
	return &VerifierMockWriter{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockWriter struct {
	mock                   *MockWriter
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockWriter) Write(_param0 []byte) *MockWriter_Write_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Write", params, verifier.timeout)
	return &MockWriter_Write_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockWriter_Write_OngoingVerification struct {
	mock              *MockWriter
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockWriter_Write_OngoingVerification) GetCapturedArguments() []byte {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockWriter_Write_OngoingVerification) GetAllCapturedArguments() (_param0 [][]byte) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]byte, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.([]byte)
		}
	}
	return
}

func (verifier *VerifierMockWriter) WriteWithContext(ctx context.Context, payload []byte) *MockWriter_WriteWithContext_OngoingVerification {
	params := []pegomock.Param{ctx, payload}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "WriteWithContext", params, verifier.timeout)
	return &MockWriter_WriteWithContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockWriter_WriteWithContext_OngoingVerification struct {
	mock              *MockWriter
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockWriter_WriteWithContext_OngoingVerification) GetCapturedArguments() (context.Context, []byte) {
	ctx, payload := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], payload[len(payload)-1]
}

func (c *MockWriter_WriteWithContext_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 [][]byte) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([][]byte, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.([]byte)
		}
	}
	return
}
