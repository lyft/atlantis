// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/lyft/gateway (interfaces: AutoplanValidator)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	models "github.com/runatlantis/atlantis/server/events/models"
	"reflect"
	"time"
)

type MockAutoplanValidator struct {
	fail func(message string, callerSkip ...int)
}

func NewMockAutoplanValidator(options ...pegomock.Option) *MockAutoplanValidator {
	mock := &MockAutoplanValidator{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockAutoplanValidator) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockAutoplanValidator) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockAutoplanValidator) IsValid(baseRepo models.Repo, headRepo models.Repo, pull models.PullRequest, user models.User) bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockAutoplanValidator().")
	}
	params := []pegomock.Param{baseRepo, headRepo, pull, user}
	result := pegomock.GetGenericMockFrom(mock).Invoke("IsValid", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockAutoplanValidator) VerifyWasCalledOnce() *VerifierMockAutoplanValidator {
	return &VerifierMockAutoplanValidator{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockAutoplanValidator) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockAutoplanValidator {
	return &VerifierMockAutoplanValidator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockAutoplanValidator) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockAutoplanValidator {
	return &VerifierMockAutoplanValidator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockAutoplanValidator) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockAutoplanValidator {
	return &VerifierMockAutoplanValidator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockAutoplanValidator struct {
	mock                   *MockAutoplanValidator
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockAutoplanValidator) IsValid(baseRepo models.Repo, headRepo models.Repo, pull models.PullRequest, user models.User) *MockAutoplanValidator_IsValid_OngoingVerification {
	params := []pegomock.Param{baseRepo, headRepo, pull, user}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "IsValid", params, verifier.timeout)
	return &MockAutoplanValidator_IsValid_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockAutoplanValidator_IsValid_OngoingVerification struct {
	mock              *MockAutoplanValidator
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockAutoplanValidator_IsValid_OngoingVerification) GetCapturedArguments() (models.Repo, models.Repo, models.PullRequest, models.User) {
	baseRepo, headRepo, pull, user := c.GetAllCapturedArguments()
	return baseRepo[len(baseRepo)-1], headRepo[len(headRepo)-1], pull[len(pull)-1], user[len(user)-1]
}

func (c *MockAutoplanValidator_IsValid_OngoingVerification) GetAllCapturedArguments() (_param0 []models.Repo, _param1 []models.Repo, _param2 []models.PullRequest, _param3 []models.User) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]models.Repo, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(models.Repo)
		}
		_param1 = make([]models.Repo, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(models.Repo)
		}
		_param2 = make([]models.PullRequest, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(models.PullRequest)
		}
		_param3 = make([]models.User, len(c.methodInvocations))
		for u, param := range params[3] {
			_param3[u] = param.(models.User)
		}
	}
	return
}
