// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/lyft/gateway (interfaces: EventValidator)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	models "github.com/runatlantis/atlantis/server/events/models"
	logging "github.com/runatlantis/atlantis/server/logging"
	"reflect"
	"time"
)

type MockEventValidator struct {
	fail func(message string, callerSkip ...int)
}

func NewMockEventValidator(options ...pegomock.Option) *MockEventValidator {
	mock := &MockEventValidator{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockEventValidator) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockEventValidator) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockEventValidator) InstrumentedIsValid(logger logging.SimpleLogging, baseRepo models.Repo, headRepo models.Repo, pull models.PullRequest, user models.User) bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockEventValidator().")
	}
	params := []pegomock.Param{logger, baseRepo, headRepo, pull, user}
	result := pegomock.GetGenericMockFrom(mock).Invoke("InstrumentedIsValid", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockEventValidator) VerifyWasCalledOnce() *VerifierMockEventValidator {
	return &VerifierMockEventValidator{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockEventValidator) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockEventValidator {
	return &VerifierMockEventValidator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockEventValidator) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockEventValidator {
	return &VerifierMockEventValidator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockEventValidator) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockEventValidator {
	return &VerifierMockEventValidator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockEventValidator struct {
	mock                   *MockEventValidator
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockEventValidator) InstrumentedIsValid(logger logging.SimpleLogging, baseRepo models.Repo, headRepo models.Repo, pull models.PullRequest, user models.User) *MockEventValidator_InstrumentedIsValid_OngoingVerification {
	params := []pegomock.Param{logger, baseRepo, headRepo, pull, user}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "InstrumentedIsValid", params, verifier.timeout)
	return &MockEventValidator_InstrumentedIsValid_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockEventValidator_InstrumentedIsValid_OngoingVerification struct {
	mock              *MockEventValidator
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockEventValidator_InstrumentedIsValid_OngoingVerification) GetCapturedArguments() (logging.SimpleLogging, models.Repo, models.Repo, models.PullRequest, models.User) {
	logger, baseRepo, headRepo, pull, user := c.GetAllCapturedArguments()
	return logger[len(logger)-1], baseRepo[len(baseRepo)-1], headRepo[len(headRepo)-1], pull[len(pull)-1], user[len(user)-1]
}

func (c *MockEventValidator_InstrumentedIsValid_OngoingVerification) GetAllCapturedArguments() (_param0 []logging.SimpleLogging, _param1 []models.Repo, _param2 []models.Repo, _param3 []models.PullRequest, _param4 []models.User) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]logging.SimpleLogging, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(logging.SimpleLogging)
		}
		_param1 = make([]models.Repo, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(models.Repo)
		}
		_param2 = make([]models.Repo, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(models.Repo)
		}
		_param3 = make([]models.PullRequest, len(c.methodInvocations))
		for u, param := range params[3] {
			_param3[u] = param.(models.PullRequest)
		}
		_param4 = make([]models.User, len(c.methodInvocations))
		for u, param := range params[4] {
			_param4[u] = param.(models.User)
		}
	}
	return
}
