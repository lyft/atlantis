// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/terraform (interfaces: ClientAsync)

package mocks

import (
	go_version "github.com/hashicorp/go-version"
	pegomock "github.com/petergtz/pegomock"
	helpers "github.com/runatlantis/atlantis/server/core/terraform/helpers"
	command "github.com/runatlantis/atlantis/server/events/command"
	"reflect"
	"time"
)

type MockClientAsync struct {
	fail func(message string, callerSkip ...int)
}

func NewMockClientAsync(options ...pegomock.Option) *MockClientAsync {
	mock := &MockClientAsync{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockClientAsync) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockClientAsync) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockClientAsync) RunCommandAsync(ctx command.ProjectContext, path string, args []string, customEnvVars map[string]string, v *go_version.Version, workspace string) <-chan helpers.Line {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClientAsync().")
	}
	params := []pegomock.Param{ctx, path, args, customEnvVars, v, workspace}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RunCommandAsync", params, []reflect.Type{reflect.TypeOf((*<-chan helpers.Line)(nil)).Elem()})
	var ret0 <-chan helpers.Line
	if len(result) != 0 {
		if result[0] != nil {
			var ok bool
			ret0, ok = result[0].(chan helpers.Line)
			if !ok {
				ret0 = result[0].(<-chan helpers.Line)
			}
		}
	}
	return ret0
}

func (mock *MockClientAsync) RunCommandAsyncWithInput(ctx command.ProjectContext, path string, args []string, customEnvVars map[string]string, v *go_version.Version, workspace string, input <-chan string) <-chan helpers.Line {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClientAsync().")
	}
	params := []pegomock.Param{ctx, path, args, customEnvVars, v, workspace, input}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RunCommandAsyncWithInput", params, []reflect.Type{reflect.TypeOf((*<-chan helpers.Line)(nil)).Elem()})
	var ret0 <-chan helpers.Line
	if len(result) != 0 {
		if result[0] != nil {
			var ok bool
			ret0, ok = result[0].(chan helpers.Line)
			if !ok {
				ret0 = result[0].(<-chan helpers.Line)
			}
		}
	}
	return ret0
}

func (mock *MockClientAsync) VerifyWasCalledOnce() *VerifierMockClientAsync {
	return &VerifierMockClientAsync{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockClientAsync) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockClientAsync {
	return &VerifierMockClientAsync{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockClientAsync) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockClientAsync {
	return &VerifierMockClientAsync{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockClientAsync) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockClientAsync {
	return &VerifierMockClientAsync{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockClientAsync struct {
	mock                   *MockClientAsync
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockClientAsync) RunCommandAsync(ctx command.ProjectContext, path string, args []string, customEnvVars map[string]string, v *go_version.Version, workspace string) *MockClientAsync_RunCommandAsync_OngoingVerification {
	params := []pegomock.Param{ctx, path, args, customEnvVars, v, workspace}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RunCommandAsync", params, verifier.timeout)
	return &MockClientAsync_RunCommandAsync_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockClientAsync_RunCommandAsync_OngoingVerification struct {
	mock              *MockClientAsync
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockClientAsync_RunCommandAsync_OngoingVerification) GetCapturedArguments() (command.ProjectContext, string, []string, map[string]string, *go_version.Version, string) {
	ctx, path, args, customEnvVars, v, workspace := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], path[len(path)-1], args[len(args)-1], customEnvVars[len(customEnvVars)-1], v[len(v)-1], workspace[len(workspace)-1]
}

func (c *MockClientAsync_RunCommandAsync_OngoingVerification) GetAllCapturedArguments() (_param0 []command.ProjectContext, _param1 []string, _param2 [][]string, _param3 []map[string]string, _param4 []*go_version.Version, _param5 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]command.ProjectContext, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(command.ProjectContext)
		}
		_param1 = make([]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([][]string, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.([]string)
		}
		_param3 = make([]map[string]string, len(c.methodInvocations))
		for u, param := range params[3] {
			_param3[u] = param.(map[string]string)
		}
		_param4 = make([]*go_version.Version, len(c.methodInvocations))
		for u, param := range params[4] {
			_param4[u] = param.(*go_version.Version)
		}
		_param5 = make([]string, len(c.methodInvocations))
		for u, param := range params[5] {
			_param5[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockClientAsync) RunCommandAsyncWithInput(ctx command.ProjectContext, path string, args []string, customEnvVars map[string]string, v *go_version.Version, workspace string, input <-chan string) *MockClientAsync_RunCommandAsyncWithInput_OngoingVerification {
	params := []pegomock.Param{ctx, path, args, customEnvVars, v, workspace, input}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RunCommandAsyncWithInput", params, verifier.timeout)
	return &MockClientAsync_RunCommandAsyncWithInput_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockClientAsync_RunCommandAsyncWithInput_OngoingVerification struct {
	mock              *MockClientAsync
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockClientAsync_RunCommandAsyncWithInput_OngoingVerification) GetCapturedArguments() (command.ProjectContext, string, []string, map[string]string, *go_version.Version, string, <-chan string) {
	ctx, path, args, customEnvVars, v, workspace, input := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], path[len(path)-1], args[len(args)-1], customEnvVars[len(customEnvVars)-1], v[len(v)-1], workspace[len(workspace)-1], input[len(input)-1]
}

func (c *MockClientAsync_RunCommandAsyncWithInput_OngoingVerification) GetAllCapturedArguments() (_param0 []command.ProjectContext, _param1 []string, _param2 [][]string, _param3 []map[string]string, _param4 []*go_version.Version, _param5 []string, _param6 []<-chan string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]command.ProjectContext, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(command.ProjectContext)
		}
		_param1 = make([]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([][]string, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.([]string)
		}
		_param3 = make([]map[string]string, len(c.methodInvocations))
		for u, param := range params[3] {
			_param3[u] = param.(map[string]string)
		}
		_param4 = make([]*go_version.Version, len(c.methodInvocations))
		for u, param := range params[4] {
			_param4[u] = param.(*go_version.Version)
		}
		_param5 = make([]string, len(c.methodInvocations))
		for u, param := range params[5] {
			_param5[u] = param.(string)
		}
		_param6 = make([]<-chan string, len(c.methodInvocations))
		for u, param := range params[6] {
			_param6[u] = param.(<-chan string)
		}
	}
	return
}
