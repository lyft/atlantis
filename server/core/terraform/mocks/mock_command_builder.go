// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/terraform (interfaces: commandBuilder)

package mocks

import (
	go_version "github.com/hashicorp/go-version"
	pegomock "github.com/petergtz/pegomock"
	exec "os/exec"
	"reflect"
	"time"
)

type MockcommandBuilder struct {
	fail func(message string, callerSkip ...int)
}

func NewMockcommandBuilder(options ...pegomock.Option) *MockcommandBuilder {
	mock := &MockcommandBuilder{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockcommandBuilder) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockcommandBuilder) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockcommandBuilder) Build(v *go_version.Version, workspace string, path string, args []string) (*exec.Cmd, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockcommandBuilder().")
	}
	params := []pegomock.Param{v, workspace, path, args}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Build", params, []reflect.Type{reflect.TypeOf((**exec.Cmd)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *exec.Cmd
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*exec.Cmd)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockcommandBuilder) VerifyWasCalledOnce() *VerifierMockcommandBuilder {
	return &VerifierMockcommandBuilder{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockcommandBuilder) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockcommandBuilder {
	return &VerifierMockcommandBuilder{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockcommandBuilder) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockcommandBuilder {
	return &VerifierMockcommandBuilder{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockcommandBuilder) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockcommandBuilder {
	return &VerifierMockcommandBuilder{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockcommandBuilder struct {
	mock                   *MockcommandBuilder
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockcommandBuilder) Build(v *go_version.Version, workspace string, path string, args []string) *MockcommandBuilder_Build_OngoingVerification {
	params := []pegomock.Param{v, workspace, path, args}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Build", params, verifier.timeout)
	return &MockcommandBuilder_Build_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockcommandBuilder_Build_OngoingVerification struct {
	mock              *MockcommandBuilder
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockcommandBuilder_Build_OngoingVerification) GetCapturedArguments() (*go_version.Version, string, string, []string) {
	v, workspace, path, args := c.GetAllCapturedArguments()
	return v[len(v)-1], workspace[len(workspace)-1], path[len(path)-1], args[len(args)-1]
}

func (c *MockcommandBuilder_Build_OngoingVerification) GetAllCapturedArguments() (_param0 []*go_version.Version, _param1 []string, _param2 []string, _param3 [][]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*go_version.Version, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(*go_version.Version)
		}
		_param1 = make([]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([]string, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(string)
		}
		_param3 = make([][]string, len(c.methodInvocations))
		for u, param := range params[3] {
			_param3[u] = param.([]string)
		}
	}
	return
}
