// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/neptune/gateway/event (interfaces: ProjectBuilder)

package mocks

import (
	context "context"
	pegomock "github.com/petergtz/pegomock"
	valid "github.com/runatlantis/atlantis/server/core/config/valid"
	event "github.com/runatlantis/atlantis/server/neptune/gateway/event"
	"reflect"
	"time"
)

type MockProjectBuilder struct {
	fail func(message string, callerSkip ...int)
}

func NewMockProjectBuilder(options ...pegomock.Option) *MockProjectBuilder {
	mock := &MockProjectBuilder{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockProjectBuilder) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockProjectBuilder) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockProjectBuilder) BuildProjectConfigs(ctx context.Context, event event.Push) ([]*valid.MergedProjectCfg, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockProjectBuilder().")
	}
	params := []pegomock.Param{ctx, event}
	result := pegomock.GetGenericMockFrom(mock).Invoke("BuildProjectConfigs", params, []reflect.Type{reflect.TypeOf((*[]*valid.MergedProjectCfg)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []*valid.MergedProjectCfg
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]*valid.MergedProjectCfg)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockProjectBuilder) VerifyWasCalledOnce() *VerifierMockProjectBuilder {
	return &VerifierMockProjectBuilder{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockProjectBuilder) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockProjectBuilder {
	return &VerifierMockProjectBuilder{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockProjectBuilder) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockProjectBuilder {
	return &VerifierMockProjectBuilder{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockProjectBuilder) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockProjectBuilder {
	return &VerifierMockProjectBuilder{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockProjectBuilder struct {
	mock                   *MockProjectBuilder
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockProjectBuilder) BuildProjectConfigs(ctx context.Context, event event.Push) *MockProjectBuilder_BuildProjectConfigs_OngoingVerification {
	params := []pegomock.Param{ctx, event}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "BuildProjectConfigs", params, verifier.timeout)
	return &MockProjectBuilder_BuildProjectConfigs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockProjectBuilder_BuildProjectConfigs_OngoingVerification struct {
	mock              *MockProjectBuilder
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockProjectBuilder_BuildProjectConfigs_OngoingVerification) GetCapturedArguments() (context.Context, event.Push) {
	ctx, event := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], event[len(event)-1]
}

func (c *MockProjectBuilder_BuildProjectConfigs_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []event.Push) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]event.Push, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(event.Push)
		}
	}
	return
}
