// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/neptune/gateway/event/source (interfaces: TmpWorkingDir)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	models "github.com/runatlantis/atlantis/server/events/models"
	"reflect"
	"time"
)

type MockTmpWorkingDir struct {
	fail func(message string, callerSkip ...int)
}

func NewMockTmpWorkingDir(options ...pegomock.Option) *MockTmpWorkingDir {
	mock := &MockTmpWorkingDir{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockTmpWorkingDir) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockTmpWorkingDir) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockTmpWorkingDir) Clone(baseRepo models.Repo, sha string, destination string) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockTmpWorkingDir().")
	}
	params := []pegomock.Param{baseRepo, sha, destination}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Clone", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockTmpWorkingDir) DeleteClone(filePath string) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockTmpWorkingDir().")
	}
	params := []pegomock.Param{filePath}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DeleteClone", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockTmpWorkingDir) GenerateDirPath(repoName string) string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockTmpWorkingDir().")
	}
	params := []pegomock.Param{repoName}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GenerateDirPath", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockTmpWorkingDir) VerifyWasCalledOnce() *VerifierMockTmpWorkingDir {
	return &VerifierMockTmpWorkingDir{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockTmpWorkingDir) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockTmpWorkingDir {
	return &VerifierMockTmpWorkingDir{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockTmpWorkingDir) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockTmpWorkingDir {
	return &VerifierMockTmpWorkingDir{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockTmpWorkingDir) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockTmpWorkingDir {
	return &VerifierMockTmpWorkingDir{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockTmpWorkingDir struct {
	mock                   *MockTmpWorkingDir
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockTmpWorkingDir) Clone(baseRepo models.Repo, sha string, destination string) *MockTmpWorkingDir_Clone_OngoingVerification {
	params := []pegomock.Param{baseRepo, sha, destination}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Clone", params, verifier.timeout)
	return &MockTmpWorkingDir_Clone_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockTmpWorkingDir_Clone_OngoingVerification struct {
	mock              *MockTmpWorkingDir
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockTmpWorkingDir_Clone_OngoingVerification) GetCapturedArguments() (models.Repo, string, string) {
	baseRepo, sha, destination := c.GetAllCapturedArguments()
	return baseRepo[len(baseRepo)-1], sha[len(sha)-1], destination[len(destination)-1]
}

func (c *MockTmpWorkingDir_Clone_OngoingVerification) GetAllCapturedArguments() (_param0 []models.Repo, _param1 []string, _param2 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]models.Repo, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(models.Repo)
		}
		_param1 = make([]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([]string, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockTmpWorkingDir) DeleteClone(filePath string) *MockTmpWorkingDir_DeleteClone_OngoingVerification {
	params := []pegomock.Param{filePath}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DeleteClone", params, verifier.timeout)
	return &MockTmpWorkingDir_DeleteClone_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockTmpWorkingDir_DeleteClone_OngoingVerification struct {
	mock              *MockTmpWorkingDir
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockTmpWorkingDir_DeleteClone_OngoingVerification) GetCapturedArguments() string {
	filePath := c.GetAllCapturedArguments()
	return filePath[len(filePath)-1]
}

func (c *MockTmpWorkingDir_DeleteClone_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockTmpWorkingDir) GenerateDirPath(repoName string) *MockTmpWorkingDir_GenerateDirPath_OngoingVerification {
	params := []pegomock.Param{repoName}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GenerateDirPath", params, verifier.timeout)
	return &MockTmpWorkingDir_GenerateDirPath_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockTmpWorkingDir_GenerateDirPath_OngoingVerification struct {
	mock              *MockTmpWorkingDir
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockTmpWorkingDir_GenerateDirPath_OngoingVerification) GetCapturedArguments() string {
	repoName := c.GetAllCapturedArguments()
	return repoName[len(repoName)-1]
}

func (c *MockTmpWorkingDir_GenerateDirPath_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}
